
//opencv
#include "opencv2/imgcodecs/imgcodecs.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/videoio/videoio.hpp"
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
void furtherProcess(Mat image,vector<Point2f>moments,vector<Point2f>prevMoments);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bs {-vid <video filename>|-img <image filename>}"                         << endl
    << "for example: ./bs -vid video.avi"                                           << endl
    << "or: ./bs -img /data/images/1.png"                                           << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}
int main(int argc, char* argv[])
{
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        processVideo(argv[2]);
    }
    else if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
vector<Mat>allFrames;
void processVideo(char* videoFilename) {
  Mat summation;
  vector<Point2f>moments;
  vector<Point2f>prevMoments;
    //create the capture object
    VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            //exit(EXIT_FAILURE);
            break;
        }

          GaussianBlur( frame, frame, Size( 5, 5 ), 0, 0 );
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", frame);
//        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
//        keyboard = waitKey( 30 );
        /*if(i<200){
        summation+=furtherProcess(fgMaskMOG2)/200;vector<Mat>allFrames;
      }*/
      furtherProcess(fgMaskMOG2,moments,prevMoments);
      //imshow("summation",summation);
    }
    //delete capture object
    for(int i=0;i<allFrames.size();i++){
      summation += allFrames[i]/allFrames.size();
    }
    imshow("summation",summation);
    waitKey(0);
    capture.release();
}
void processImages(char* fistFrameFilename) {
    //read the first file of the sequence
    frame = imread(fistFrameFilename);
    if(frame.empty()){
        //error in opening the first image
        cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFrameFilename);
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){

      GaussianBlur( frame, frame, Size( 10, 10 ), 0, 0 );

        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string frameNumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(frameNumberString);
        int frameNumber = 0;
        iss >> frameNumber;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (frameNumber + 1);
        string nextFrameNumberString = oss.str();
        string nextFrameFilename = prefix + nextFrameNumberString + suffix;
        //read the next frame
        frame = imread(nextFrameFilename);
        if(frame.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image frame: " << nextFrameFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current frame
        fn.assign(nextFrameFilename);
    }
}

    ////////////////////////////////////////////////////////////////
Point calculateBlobCentroid(vector<Point>blob)
{
    cv::Moments mu = cv::moments(blob);
    cv::Point centroid = cv::Point (mu.m10/mu.m00 , mu.m01/mu.m00);

    return centroid;
}

float dist(Point2f p,Point2f q){
  return sqrt((p.x-q.x)*(p.x-q.x)+(p.y-q.y)*(p.y-q.y));
}

Point2f closestPrevMoment(Point2f p,vector<Point2f>prevMoments){
  float minDist=9999;
  Point2f closest;
  //cout<<prevMoments.size()<<endl;
  for(int j=0;j<prevMoments.size();j++){
    //cout<<"Dist: "<<dist(p,prevMoments[j])<<endl;
    if(dist(p,prevMoments[j])<minDist){
      minDist = dist(p,prevMoments[j]);
      cout<<"minDist: "<<minDist<<endl;
      closest = prevMoments[j];
    }
  }
  cout<<"closest: "<<closest<<endl;
  return closest;
}

void furtherProcess(Mat image,vector<Point2f>moments,vector<Point2f>prevMoments){
      Mat blurred;
      GaussianBlur( image, blurred, Size( 5, 5 ), 0, 0 );
      imshow("FG Mask MOG 2 Blurred", blurred);
      allFrames.push_back(blurred);
      //Canny( blurred, blurred, 100, thresh*2, 3 );
  /// Find contours
  if(moments.size()==0){
    for(int i=0;i<moments.size();i++){
      prevMoments.push_back(moments[i]);
    }
  }
  vector<vector<Point> > contours;
  vector<Vec4i> hierarchy;
  findContours( blurred, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

  /// Draw contours
  Mat drawing = Mat::zeros( blurred.size(), CV_8UC3 );
  for( int i = 0; i< contours.size(); i++ )
     {
      // Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
      if(contourArea(contours[i])>50){
       //drawContours( drawing, contours, i, Scalar(255,255,0), -1, 8, hierarchy, 0, Point() );
       moments.push_back(calculateBlobCentroid(contours[i]));
       circle(drawing,moments[moments.size()-1],3,Scalar(0,255,255),-1,8,0);
       //cout<<"closest pt: "<<closestPrevMoment(moments[moments.size()-1],prevMoments)<<endl;
       //line(drawing,closestPrevMoment(moments[moments.size()-1],prevMoments),moments[moments.size()-1],Scalar(0,255,0),1,8,0);
     }
     }

  /// Show in a window
  namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
  imshow( "Contours", drawing );
  //prevMoments = moments;
  moments.clear();

      waitKey(30);
      //return drawing;
    }
